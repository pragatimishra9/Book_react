{"ast":null,"code":"import axios from 'axios';\nimport Request from '../Actions/Request';\nimport { config } from './Constants';\nimport moment from 'moment';\nexport const fillDoctorBookingDetails = (doctorId, setCurrentDoctorId, setTimeSlots, doctors) => {\n  setCurrentDoctorId(doctorId);\n  let currentDoctor = {};\n  doctors.map(doctor => {\n    if (doctor.id === doctorId) {\n      currentDoctor = doctor;\n    }\n    return \"\";\n  });\n  let day_start_time = moment(currentDoctor.day_start_time, \"hh:mm\");\n  let day_end_time = moment(currentDoctor.day_end_time, \"hh:mm\");\n  const timeJump = currentDoctor.appointment_slot_time.split(\" \")[0];\n  let now = moment();\n  let currentTime = moment(`${now.hour()}:${now.minute()}`, \"hh:mm\");\n  let timeStamps = [];\n  //console.log(timeJump);\n  while (day_start_time < day_end_time) {\n    if (day_start_time >= currentTime) {\n      let temp = `${day_start_time.hour()}:${day_start_time.minute()}`;\n      day_start_time = day_start_time.add(parseInt(timeJump), 'm');\n      temp = `${temp}-${day_start_time.hour()}:${day_start_time.minute()}`;\n      timeStamps.push(temp);\n    } else {\n      day_start_time = day_start_time.add(parseInt(timeJump), 'm');\n    }\n  }\n  setTimeSlots(timeStamps);\n};\nexport function handleSelectedTimeSlot(e, setSelectedTimeSlot) {\n  if (e.target.checked) {\n    setSelectedTimeSlot(e.target.value);\n  } else {\n    setSelectedTimeSlot(\"\");\n  }\n}\nexport async function bookAppointment(currentDoctorId, bookingDate, selectedTimeSlot, patientName, patientEmail, patientContact) {\n  if (bookingDate === \"\") {\n    alert(\"Please Select a Date\");\n  } else if (selectedTimeSlot === \"\") {\n    alert(\"please select a timeslot\");\n  } else if (patientName === \"\") {\n    alert(\"Please enter your name\");\n  } else if (patientEmail === \"\" | patientEmail.split('@').length != 2) {\n    alert(\"please enter correct email\");\n  } else if (patientContact === \"\" | patientContact.match(/^[0-9]+$/) === null | patientContact.length >= 10) {\n    alert(\" please Enter correct contact\");\n  } else {\n    let data = {\n      doctor_id: currentDoctorId,\n      date: bookingDate,\n      time_slot: selectedTimeSlot,\n      patient_name: patientName,\n      patient_email: patientEmail,\n      patient_contact: patientContact\n    };\n    const body = JSON.stringify(data);\n    const res = await axios.post(Request.bookAppointment, body, config);\n    alert(res.data.message);\n  }\n}\nexport function getToday() {\n  let today, dd, mm, yyyy;\n  today = new Date();\n  dd = today.getDate();\n  if (parseInt(dd) < 10) {\n    dd = \"0\" + dd;\n  }\n  mm = today.getMonth() + 1;\n  if (parseInt(mm) < 10) {\n    mm = \"0\" + mm;\n  }\n  yyyy = today.getFullYear();\n  return yyyy + \"-\" + mm + \"-\" + dd;\n}","map":{"version":3,"names":["axios","Request","config","moment","fillDoctorBookingDetails","doctorId","setCurrentDoctorId","setTimeSlots","doctors","currentDoctor","map","doctor","id","day_start_time","day_end_time","timeJump","appointment_slot_time","split","now","currentTime","hour","minute","timeStamps","temp","add","parseInt","push","handleSelectedTimeSlot","e","setSelectedTimeSlot","target","checked","value","bookAppointment","currentDoctorId","bookingDate","selectedTimeSlot","patientName","patientEmail","patientContact","alert","length","match","data","doctor_id","date","time_slot","patient_name","patient_email","patient_contact","body","JSON","stringify","res","post","message","getToday","today","dd","mm","yyyy","Date","getDate","getMonth","getFullYear"],"sources":["/home/pragatim/code/repo/Book_react/BookAnAppointment_react/frontend/src/Services/HomeServices.js"],"sourcesContent":["import axios from 'axios';\nimport Request from '../Actions/Request';\nimport { config } from './Constants';\nimport moment from 'moment';\n\n\nexport const fillDoctorBookingDetails = (doctorId, setCurrentDoctorId, setTimeSlots, doctors) => {\n    setCurrentDoctorId(doctorId);\n    let currentDoctor = {};\n    doctors.map((doctor) => {\n        if (doctor.id === doctorId) {\n            currentDoctor = doctor;\n        }\n        return \"\";\n    });\n    let day_start_time = moment(currentDoctor.day_start_time, \"hh:mm\");\n    let day_end_time = moment(currentDoctor.day_end_time, \"hh:mm\");\n    const timeJump = currentDoctor.appointment_slot_time.split(\" \")[0];\n    let now = moment();\n    let currentTime = moment(`${now.hour()}:${now.minute()}`, \"hh:mm\");\n    let timeStamps = [];\n    //console.log(timeJump);\n    while (day_start_time < day_end_time) {\n        if (day_start_time >= currentTime) {\n            let temp = `${day_start_time.hour()}:${day_start_time.minute()}`\n            day_start_time = day_start_time.add(parseInt(timeJump), 'm');\n            temp = `${temp}-${day_start_time.hour()}:${day_start_time.minute()}`;\n            timeStamps.push(temp);\n        } else {\n            day_start_time = day_start_time.add(parseInt(timeJump), 'm');\n        }\n    }\n    setTimeSlots(timeStamps);\n}\n\nexport function handleSelectedTimeSlot(e, setSelectedTimeSlot) {\n    if (e.target.checked) {\n        setSelectedTimeSlot(e.target.value);\n    }\n    else {\n        setSelectedTimeSlot(\"\");\n    }\n}\n\nexport async function bookAppointment(currentDoctorId, bookingDate, selectedTimeSlot, patientName, patientEmail, patientContact) {\n\n    if (bookingDate === \"\") {\n        alert(\"Please Select a Date\");\n    } else if (selectedTimeSlot === \"\") {\n        alert(\"please select a timeslot\");\n    } else if (patientName === \"\") {\n        alert(\"Please enter your name\")\n    } else if (patientEmail === \"\" | patientEmail.split('@').length != 2) {\n        alert(\"please enter correct email\")\n    } else if (patientContact === \"\" | patientContact.match(/^[0-9]+$/) === null | patientContact.length >= 10) {\n        alert(\" please Enter correct contact\")\n    } else {\n        let data = {\n            doctor_id: currentDoctorId,\n            date: bookingDate,\n            time_slot: selectedTimeSlot,\n            patient_name: patientName,\n            patient_email: patientEmail,\n            patient_contact: patientContact,\n        };\n        const body = JSON.stringify(data);\n        const res = await axios.post(Request.bookAppointment, body, config);\n        alert(res.data.message);\n    }\n\n}\n\n\nexport function getToday() {\n    let today, dd, mm, yyyy;\n    today = new Date();\n    dd = today.getDate();\n    if (parseInt(dd) < 10) {\n        dd = \"0\" + dd;\n    }\n    mm = today.getMonth() + 1;\n    if (parseInt(mm) < 10) {\n        mm = \"0\" + mm;\n    }\n    yyyy = today.getFullYear();\n    return yyyy + \"-\" + mm + \"-\" + dd;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}