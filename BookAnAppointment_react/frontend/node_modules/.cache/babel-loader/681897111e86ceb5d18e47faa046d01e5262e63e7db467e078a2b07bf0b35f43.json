{"ast":null,"code":"export const fillDoctorBookingDetails = doctorId => {\n  setCurrentDoctorId(doctorId);\n  let currentDoctor = {};\n  doctors.map(doctor => {\n    if (doctor.id === doctorId) {\n      currentDoctor = doctor;\n    }\n    return \"\";\n  });\n  let day_start_time = moment(currentDoctor.day_start_time, \"hh:mm\");\n  let day_end_time = moment(currentDoctor.day_end_time, \"hh:mm\");\n  const timeJump = currentDoctor.appointment_slot_time.split(\" \")[0];\n  let now = moment();\n  let currentTime = moment(`${now.hour()}:${now.minute()}`, \"hh:mm\");\n  let timeStamps = [];\n  //console.log(timeJump);\n  while (day_start_time < day_end_time) {\n    if (day_start_time >= currentTime) {\n      let temp = `${day_start_time.hour()}:${day_start_time.minute()}`;\n      day_start_time = day_start_time.add(parseInt(timeJump), 'm');\n      temp = `${temp}-${day_start_time.hour()}:${day_start_time.minute()}`;\n      timeStamps.push(temp);\n    } else {\n      day_start_time = day_start_time.add(parseInt(timeJump), 'm');\n    }\n  }\n  setTimeSlots(timeStamps);\n};\nexport function handleSelectedTimeSlot(e) {\n  if (e.target.checked) {\n    setSelectedTimeSlot(e.target.value);\n  } else {\n    setSelectedTimeSlot(\"\");\n  }\n}\nexport async function bookAppointment() {\n  let data = {\n    doctor_id: currentDoctorId,\n    date: bookingDate,\n    time_slot: selectedTimeSlot,\n    patient_name: patientName,\n    patient_email: patientEmail,\n    patient_contact: patientContact\n  };\n  const body = JSON.stringify(data);\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  };\n  const res = await axios.post(Request.bookAppointment, body, config);\n  alert(res.data.message);\n}","map":{"version":3,"names":["fillDoctorBookingDetails","doctorId","setCurrentDoctorId","currentDoctor","doctors","map","doctor","id","day_start_time","moment","day_end_time","timeJump","appointment_slot_time","split","now","currentTime","hour","minute","timeStamps","temp","add","parseInt","push","setTimeSlots","handleSelectedTimeSlot","e","target","checked","setSelectedTimeSlot","value","bookAppointment","data","doctor_id","currentDoctorId","date","bookingDate","time_slot","selectedTimeSlot","patient_name","patientName","patient_email","patientEmail","patient_contact","patientContact","body","JSON","stringify","config","headers","res","axios","post","Request","alert","message"],"sources":["/home/pragatim/code/BookAnAppointment_react/frontend/src/Services/HomeServices.js"],"sourcesContent":["export const fillDoctorBookingDetails = (doctorId) => {\n    setCurrentDoctorId(doctorId);\n    let currentDoctor = {};\n    doctors.map((doctor) => {\n        if (doctor.id === doctorId) {\n            currentDoctor = doctor;\n        }\n        return \"\";\n    });\n    let day_start_time = moment(currentDoctor.day_start_time, \"hh:mm\");\n    let day_end_time = moment(currentDoctor.day_end_time, \"hh:mm\");\n    const timeJump = currentDoctor.appointment_slot_time.split(\" \")[0];\n    let now = moment();\n    let currentTime = moment(`${now.hour()}:${now.minute()}`, \"hh:mm\");\n    let timeStamps = [];\n    //console.log(timeJump);\n    while (day_start_time < day_end_time) {\n        if (day_start_time >= currentTime) {\n            let temp = `${day_start_time.hour()}:${day_start_time.minute()}`\n            day_start_time = day_start_time.add(parseInt(timeJump), 'm');\n            temp = `${temp}-${day_start_time.hour()}:${day_start_time.minute()}`;\n            timeStamps.push(temp);\n        } else {\n            day_start_time = day_start_time.add(parseInt(timeJump), 'm');\n        }\n    }\n    setTimeSlots(timeStamps);\n}\n\nexport function handleSelectedTimeSlot(e) {\n    if (e.target.checked) {\n        setSelectedTimeSlot(e.target.value);\n    }\n    else {\n        setSelectedTimeSlot(\"\");\n    }\n}\n\nexport async function bookAppointment() {\n    let data = {\n        doctor_id: currentDoctorId,\n        date: bookingDate,\n        time_slot: selectedTimeSlot,\n        patient_name: patientName,\n        patient_email: patientEmail,\n        patient_contact: patientContact,\n    };\n    const body = JSON.stringify(data);\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n    };\n\n    const res = await axios.post(Request.bookAppointment, body, config);\n    alert(res.data.message);\n}"],"mappings":"AAAA,OAAO,MAAMA,wBAAwB,GAAIC,QAAQ,IAAK;EAClDC,kBAAkB,CAACD,QAAQ,CAAC;EAC5B,IAAIE,aAAa,GAAG,CAAC,CAAC;EACtBC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;IACpB,IAAIA,MAAM,CAACC,EAAE,KAAKN,QAAQ,EAAE;MACxBE,aAAa,GAAGG,MAAM;IAC1B;IACA,OAAO,EAAE;EACb,CAAC,CAAC;EACF,IAAIE,cAAc,GAAGC,MAAM,CAACN,aAAa,CAACK,cAAc,EAAE,OAAO,CAAC;EAClE,IAAIE,YAAY,GAAGD,MAAM,CAACN,aAAa,CAACO,YAAY,EAAE,OAAO,CAAC;EAC9D,MAAMC,QAAQ,GAAGR,aAAa,CAACS,qBAAqB,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClE,IAAIC,GAAG,GAAGL,MAAM,EAAE;EAClB,IAAIM,WAAW,GAAGN,MAAM,CAAE,GAAEK,GAAG,CAACE,IAAI,EAAG,IAAGF,GAAG,CAACG,MAAM,EAAG,EAAC,EAAE,OAAO,CAAC;EAClE,IAAIC,UAAU,GAAG,EAAE;EACnB;EACA,OAAOV,cAAc,GAAGE,YAAY,EAAE;IAClC,IAAIF,cAAc,IAAIO,WAAW,EAAE;MAC/B,IAAII,IAAI,GAAI,GAAEX,cAAc,CAACQ,IAAI,EAAG,IAAGR,cAAc,CAACS,MAAM,EAAG,EAAC;MAChET,cAAc,GAAGA,cAAc,CAACY,GAAG,CAACC,QAAQ,CAACV,QAAQ,CAAC,EAAE,GAAG,CAAC;MAC5DQ,IAAI,GAAI,GAAEA,IAAK,IAAGX,cAAc,CAACQ,IAAI,EAAG,IAAGR,cAAc,CAACS,MAAM,EAAG,EAAC;MACpEC,UAAU,CAACI,IAAI,CAACH,IAAI,CAAC;IACzB,CAAC,MAAM;MACHX,cAAc,GAAGA,cAAc,CAACY,GAAG,CAACC,QAAQ,CAACV,QAAQ,CAAC,EAAE,GAAG,CAAC;IAChE;EACJ;EACAY,YAAY,CAACL,UAAU,CAAC;AAC5B,CAAC;AAED,OAAO,SAASM,sBAAsB,CAACC,CAAC,EAAE;EACtC,IAAIA,CAAC,CAACC,MAAM,CAACC,OAAO,EAAE;IAClBC,mBAAmB,CAACH,CAAC,CAACC,MAAM,CAACG,KAAK,CAAC;EACvC,CAAC,MACI;IACDD,mBAAmB,CAAC,EAAE,CAAC;EAC3B;AACJ;AAEA,OAAO,eAAeE,eAAe,GAAG;EACpC,IAAIC,IAAI,GAAG;IACPC,SAAS,EAAEC,eAAe;IAC1BC,IAAI,EAAEC,WAAW;IACjBC,SAAS,EAAEC,gBAAgB;IAC3BC,YAAY,EAAEC,WAAW;IACzBC,aAAa,EAAEC,YAAY;IAC3BC,eAAe,EAAEC;EACrB,CAAC;EACD,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACf,IAAI,CAAC;EACjC,MAAMgB,MAAM,GAAG;IACXC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,QAAQ,EAAE;IACd;EACJ,CAAC;EAED,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACC,IAAI,CAACC,OAAO,CAACtB,eAAe,EAAEc,IAAI,EAAEG,MAAM,CAAC;EACnEM,KAAK,CAACJ,GAAG,CAAClB,IAAI,CAACuB,OAAO,CAAC;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}