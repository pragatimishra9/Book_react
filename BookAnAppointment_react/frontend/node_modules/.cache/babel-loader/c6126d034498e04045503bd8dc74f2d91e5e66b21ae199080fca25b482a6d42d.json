{"ast":null,"code":"import Request from \"../Actions/Request\";\nimport axios from 'axios';\nimport { config } from \"./Constants\";\nexport async function updateDoctorInfo(startTime, endTime, period) {\n  const data = {\n    user: localStorage.getItem('userEmail'),\n    type: 'infoUpdate',\n    startTime: startTime,\n    endTime: endTime,\n    period: period\n  };\n  const body = JSON.stringify(data);\n  const res = await axios.post(Request.doctorInfo, body, config);\n  if (res.data.status === 200) {\n    alert(res.data.message);\n  } else {\n    alert(res.data.error);\n  }\n}\nexport async function filterAppointmentData(currentDate, setAppointments) {\n  const data = {\n    user: localStorage.getItem('userEmail'),\n    type: 'info',\n    currentDate: currentDate\n  };\n  const body = JSON.stringify(data);\n  const res = await axios.post(Request.doctorInfo, body, config);\n  if (res.data.status === 200) {\n    setAppointments(res.data.appointments);\n  } else {\n    alert(res.data.error);\n  }\n}\nexport async function updateAppointment(appId, status, appointments, setAppointments) {\n  const data = {\n    id: appId,\n    status: status\n  };\n  const body = JSON.stringify(data);\n  const res = await axios.post(Request.updateAppointment, body, config);\n  if (res.data.status === 200) {\n    let apps = [];\n    appointments.map(appointment => {\n      if (appointment.id === appId) {\n        appointment.appointment_status = status;\n        apps.push(appointment);\n      } else {\n        apps.push(appointment);\n      }\n      return \"\";\n    });\n    setAppointments(apps);\n  } else {\n    alert(res.data.error);\n  }\n}","map":{"version":3,"names":["Request","axios","config","updateDoctorInfo","startTime","endTime","period","data","user","localStorage","getItem","type","body","JSON","stringify","res","post","doctorInfo","status","alert","message","error","filterAppointmentData","currentDate","setAppointments","appointments","updateAppointment","appId","id","apps","map","appointment","appointment_status","push"],"sources":["/home/pragatim/code/BookAnAppointment_react/frontend/src/Services/DashboardServices.js"],"sourcesContent":["import Request from \"../Actions/Request\";\nimport axios from 'axios';\nimport { config } from \"./Constants\";\n\nexport async function updateDoctorInfo(startTime, endTime, period) {\n    const data = {\n        user: localStorage.getItem('userEmail'),\n        type: 'infoUpdate',\n        startTime: startTime,\n        endTime: endTime,\n        period: period\n    }\n\n    const body = JSON.stringify(data);\n    const res = await axios.post(Request.doctorInfo, body, config);\n    if (res.data.status === 200) {\n        alert(res.data.message)\n    }\n    else {\n        alert(res.data.error)\n    }\n\n}\n\nexport async function filterAppointmentData(currentDate, setAppointments) {\n    const data = {\n        user: localStorage.getItem('userEmail'),\n        type: 'info',\n        currentDate: currentDate\n    }\n\n    const body = JSON.stringify(data);\n    const res = await axios.post(Request.doctorInfo, body, config);\n    if (res.data.status === 200) {\n        setAppointments(res.data.appointments);\n    }\n    else {\n        alert(res.data.error)\n    }\n}\n\nexport async function updateAppointment(appId, status, appointments, setAppointments) {\n    const data = {\n        id: appId,\n        status: status\n    }\n\n    const body = JSON.stringify(data);\n    const res = await axios.post(Request.updateAppointment, body, config);\n    if (res.data.status === 200) {\n        let apps = []\n        appointments.map((appointment) => {\n            if (appointment.id === appId) {\n                appointment.appointment_status = status;\n                apps.push(appointment);\n            }\n            else {\n                apps.push(appointment);\n            }\n            return \"\";\n        });\n        setAppointments(apps);\n    }\n    else {\n        alert(res.data.error)\n    }\n}"],"mappings":"AAAA,OAAOA,OAAO,MAAM,oBAAoB;AACxC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,aAAa;AAEpC,OAAO,eAAeC,gBAAgB,CAACC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAC/D,MAAMC,IAAI,GAAG;IACTC,IAAI,EAAEC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACvCC,IAAI,EAAE,YAAY;IAClBP,SAAS,EAAEA,SAAS;IACpBC,OAAO,EAAEA,OAAO;IAChBC,MAAM,EAAEA;EACZ,CAAC;EAED,MAAMM,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC;EACjC,MAAMQ,GAAG,GAAG,MAAMd,KAAK,CAACe,IAAI,CAAChB,OAAO,CAACiB,UAAU,EAAEL,IAAI,EAAEV,MAAM,CAAC;EAC9D,IAAIa,GAAG,CAACR,IAAI,CAACW,MAAM,KAAK,GAAG,EAAE;IACzBC,KAAK,CAACJ,GAAG,CAACR,IAAI,CAACa,OAAO,CAAC;EAC3B,CAAC,MACI;IACDD,KAAK,CAACJ,GAAG,CAACR,IAAI,CAACc,KAAK,CAAC;EACzB;AAEJ;AAEA,OAAO,eAAeC,qBAAqB,CAACC,WAAW,EAAEC,eAAe,EAAE;EACtE,MAAMjB,IAAI,GAAG;IACTC,IAAI,EAAEC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACvCC,IAAI,EAAE,MAAM;IACZY,WAAW,EAAEA;EACjB,CAAC;EAED,MAAMX,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC;EACjC,MAAMQ,GAAG,GAAG,MAAMd,KAAK,CAACe,IAAI,CAAChB,OAAO,CAACiB,UAAU,EAAEL,IAAI,EAAEV,MAAM,CAAC;EAC9D,IAAIa,GAAG,CAACR,IAAI,CAACW,MAAM,KAAK,GAAG,EAAE;IACzBM,eAAe,CAACT,GAAG,CAACR,IAAI,CAACkB,YAAY,CAAC;EAC1C,CAAC,MACI;IACDN,KAAK,CAACJ,GAAG,CAACR,IAAI,CAACc,KAAK,CAAC;EACzB;AACJ;AAEA,OAAO,eAAeK,iBAAiB,CAACC,KAAK,EAAET,MAAM,EAAEO,YAAY,EAAED,eAAe,EAAE;EAClF,MAAMjB,IAAI,GAAG;IACTqB,EAAE,EAAED,KAAK;IACTT,MAAM,EAAEA;EACZ,CAAC;EAED,MAAMN,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC;EACjC,MAAMQ,GAAG,GAAG,MAAMd,KAAK,CAACe,IAAI,CAAChB,OAAO,CAAC0B,iBAAiB,EAAEd,IAAI,EAAEV,MAAM,CAAC;EACrE,IAAIa,GAAG,CAACR,IAAI,CAACW,MAAM,KAAK,GAAG,EAAE;IACzB,IAAIW,IAAI,GAAG,EAAE;IACbJ,YAAY,CAACK,GAAG,CAAEC,WAAW,IAAK;MAC9B,IAAIA,WAAW,CAACH,EAAE,KAAKD,KAAK,EAAE;QAC1BI,WAAW,CAACC,kBAAkB,GAAGd,MAAM;QACvCW,IAAI,CAACI,IAAI,CAACF,WAAW,CAAC;MAC1B,CAAC,MACI;QACDF,IAAI,CAACI,IAAI,CAACF,WAAW,CAAC;MAC1B;MACA,OAAO,EAAE;IACb,CAAC,CAAC;IACFP,eAAe,CAACK,IAAI,CAAC;EACzB,CAAC,MACI;IACDV,KAAK,CAACJ,GAAG,CAACR,IAAI,CAACc,KAAK,CAAC;EACzB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}