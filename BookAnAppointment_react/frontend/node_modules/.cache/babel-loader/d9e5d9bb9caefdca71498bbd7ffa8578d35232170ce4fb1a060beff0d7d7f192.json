{"ast":null,"code":"import axios from 'axios';\nimport Request from '../Actions/Request';\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { config } from '../Services/Constants';\nexport async function getFilterData(currentFilterDate, setDetailedReport, setSummaryReport) {\n  const data = {\n    user: localStorage.getItem('userEmail'),\n    filterDate: currentFilterDate\n  };\n  const body = JSON.stringify(data);\n  const res = await axios.post(Request.filterAppointment, body, config);\n  if (res.data.status === 200) {\n    setDetailedReport(res.data.appointments);\n    let uniqueDates = [];\n    for (let index = 0; index < res.data.appointments.length; index++) {\n      if (uniqueDates.includes(res.data.appointments[index].appointment_date)) {} else {\n        uniqueDates.push(res.data.appointments[index].appointment_date);\n      }\n    }\n    let tempReport = [];\n    for (let index = 0; index < uniqueDates.length; index++) {\n      let total = 0;\n      let closed = 0;\n      let canceled = 0;\n      for (let index1 = 0; index1 < res.data.appointments.length; index1++) {\n        if (res.data.appointments[index1].appointment_date === uniqueDates[index]) {\n          total++;\n          if (res.data.appointments[index1].appointment_status === \"Closed\") {\n            closed++;\n          }\n          if (res.data.appointments[index1].appointment_status === \"Canceled\") {\n            canceled++;\n          }\n        }\n      }\n      let temp = {\n        date: uniqueDates[index],\n        total: total,\n        closed: closed,\n        canceled: canceled\n      };\n      tempReport.push(temp);\n    }\n    setSummaryReport(tempReport);\n  } else {\n    alert(res.data.error);\n  }\n}\nexport function generatePDF() {\n  const unit = \"pt\";\n  const size = \"A4\"; // Use A1, A2, A3 or A4\n  const orientation = \"portrait\"; // portrait or landscape\n\n  const marginLeft = 40;\n  const doc = new jsPDF(orientation, unit, size);\n  doc.setFontSize(15);\n  const title = \"Detailed Report\";\n  const headers = [[\"Date\", \"Patient Name\", \"Status\"]];\n  const data = detailedReport.map(elt => [elt.appointment_date, elt.patient_name, elt.appointment_status]);\n  let content = {\n    startY: 50,\n    head: headers,\n    body: data\n  };\n  doc.text(title, marginLeft, 40);\n  doc.autoTable(content);\n  doc.save(\"Detailed_report.pdf\");\n  const doc2 = new jsPDF(orientation, unit, size);\n  doc2.setFontSize(15);\n  const stitle = \"Summary Report\";\n  const sheaders = [[\"Date\", \"# Appointments\", \"# Closed\", \"# Canceled\"]];\n  const sdata = summaryReport.map(elt => [elt.date, elt.total, elt.closed, elt.canceled]);\n  let scontent = {\n    startY: 50,\n    head: sheaders,\n    body: sdata\n  };\n  doc2.text(stitle, marginLeft, 40);\n  doc2.autoTable(scontent);\n  doc2.save(\"Summary_report.pdf\");\n}","map":{"version":3,"names":["axios","Request","jsPDF","config","getFilterData","currentFilterDate","setDetailedReport","setSummaryReport","data","user","localStorage","getItem","filterDate","body","JSON","stringify","res","post","filterAppointment","status","appointments","uniqueDates","index","length","includes","appointment_date","push","tempReport","total","closed","canceled","index1","appointment_status","temp","date","alert","error","generatePDF","unit","size","orientation","marginLeft","doc","setFontSize","title","headers","detailedReport","map","elt","patient_name","content","startY","head","text","autoTable","save","doc2","stitle","sheaders","sdata","summaryReport","scontent"],"sources":["/home/pragatim/code/BookAnAppointment_react/frontend/src/Services/ReportServices.js"],"sourcesContent":["import axios from 'axios';\nimport Request from '../Actions/Request';\nimport jsPDF from \"jspdf\";\nimport \"jspdf-autotable\";\nimport { config } from '../Services/Constants';\n\nexport async function getFilterData(currentFilterDate, setDetailedReport, setSummaryReport) {\n    const data = {\n        user: localStorage.getItem('userEmail'),\n        filterDate: currentFilterDate\n    }\n    const body = JSON.stringify(data);\n    const res = await axios.post(Request.filterAppointment, body, config);\n    if (res.data.status === 200) {\n        setDetailedReport(res.data.appointments)\n        let uniqueDates = []\n        for (let index = 0; index < res.data.appointments.length; index++) {\n            if (uniqueDates.includes(res.data.appointments[index].appointment_date)) {\n\n            } else {\n                uniqueDates.push(res.data.appointments[index].appointment_date);\n            }\n        }\n        let tempReport = []\n        for (let index = 0; index < uniqueDates.length; index++) {\n            let total = 0;\n            let closed = 0;\n            let canceled = 0;\n            for (let index1 = 0; index1 < res.data.appointments.length; index1++) {\n                if (res.data.appointments[index1].appointment_date === uniqueDates[index]) {\n                    total++;\n                    if (res.data.appointments[index1].appointment_status === \"Closed\") {\n                        closed++;\n                    }\n                    if (res.data.appointments[index1].appointment_status === \"Canceled\") {\n                        canceled++;\n                    }\n\n                }\n            }\n            let temp = {\n                date: uniqueDates[index],\n                total: total,\n                closed: closed,\n                canceled: canceled,\n            }\n            tempReport.push(temp)\n        }\n        setSummaryReport(tempReport);\n    }\n    else {\n        alert(res.data.error);\n    }\n}\n\nexport function generatePDF() {\n    const unit = \"pt\";\n    const size = \"A4\"; // Use A1, A2, A3 or A4\n    const orientation = \"portrait\"; // portrait or landscape\n\n    const marginLeft = 40;\n    const doc = new jsPDF(orientation, unit, size);\n\n    doc.setFontSize(15);\n\n    const title = \"Detailed Report\";\n    const headers = [[\"Date\", \"Patient Name\", \"Status\"]];\n\n    const data = detailedReport.map(elt => [elt.appointment_date, elt.patient_name, elt.appointment_status]);\n\n    let content = {\n        startY: 50,\n        head: headers,\n        body: data\n    };\n\n    doc.text(title, marginLeft, 40);\n    doc.autoTable(content);\n    doc.save(\"Detailed_report.pdf\")\n\n    const doc2 = new jsPDF(orientation, unit, size);\n    doc2.setFontSize(15);\n    const stitle = \"Summary Report\";\n    const sheaders = [[\"Date\", \"# Appointments\", \"# Closed\", \"# Canceled\"]];\n\n    const sdata = summaryReport.map(elt => [elt.date, elt.total, elt.closed, elt.canceled]);\n\n    let scontent = {\n        startY: 50,\n        head: sheaders,\n        body: sdata\n    };\n\n    doc2.text(stitle, marginLeft, 40);\n    doc2.autoTable(scontent);\n    doc2.save(\"Summary_report.pdf\")\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}