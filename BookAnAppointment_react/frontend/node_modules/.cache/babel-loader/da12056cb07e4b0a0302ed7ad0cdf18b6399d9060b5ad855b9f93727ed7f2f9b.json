{"ast":null,"code":"import axios from 'axios';\nimport Request from '../Actions/Request';\nimport { config } from './Constants';\nimport moment from 'moment';\nexport const fillDoctorBookingDetails = (doctorId, setCurrentDoctorId, setTimeSlots, doctors) => {\n  setCurrentDoctorId(doctorId);\n  let currentDoctor = {};\n  doctors.map(doctor => {\n    if (doctor.id === doctorId) {\n      currentDoctor = doctor;\n    }\n    return \"\";\n  });\n  let day_start_time = moment(currentDoctor.day_start_time, \"hh:mm\");\n  let day_end_time = moment(currentDoctor.day_end_time, \"hh:mm\");\n  const timeJump = currentDoctor.appointment_slot_time.split(\" \")[0];\n  let now = moment();\n  let currentTime = moment(`${now.hour()}:${now.minute()}`, \"hh:mm\");\n  let timeStamps = [];\n  //console.log(timeJump);\n  while (day_start_time < day_end_time) {\n    if (day_start_time >= currentTime) {\n      let temp = `${day_start_time.hour()}:${day_start_time.minute()}`;\n      day_start_time = day_start_time.add(parseInt(timeJump), 'm');\n      temp = `${temp}-${day_start_time.hour()}:${day_start_time.minute()}`;\n      timeStamps.push(temp);\n    } else {\n      day_start_time = day_start_time.add(parseInt(timeJump), 'm');\n    }\n  }\n  setTimeSlots(timeStamps);\n};\nexport function handleSelectedTimeSlot(e, setSelectedTimeSlot) {\n  if (e.target.checked) {\n    setSelectedTimeSlot(e.target.value);\n  } else {\n    setSelectedTimeSlot(\"\");\n  }\n}\nexport async function bookAppointment(currentDoctorId, bookingDate, selectedTimeSlot, patientName, patientEmail, patientContact) {\n  let data = {\n    doctor_id: currentDoctorId,\n    date: bookingDate,\n    time_slot: selectedTimeSlot,\n    patient_name: patientName,\n    patient_email: patientEmail,\n    patient_contact: patientContact\n  };\n  const body = JSON.stringify(data);\n  const res = await axios.post(Request.bookAppointment, body, config);\n  alert(res.data.message);\n}\nexport function getToday() {\n  let today, dd, mm, yyyy;\n  today = new Date();\n  dd = today.getDate();\n  if (parseInt(dd) < 10) {\n    dd = \"0\" + dd;\n  }\n  mm = today.getMonth();\n  if (parseInt(mm) < 10) {\n    mm = \"0\" + mm;\n  }\n  yyyy = today.getFullYear();\n  console.log(yyyy + \"-\" + mm + \"-\" + dd);\n  return yyyy + \"-\" + mm + \"-\" + dd;\n}","map":{"version":3,"names":["axios","Request","config","moment","fillDoctorBookingDetails","doctorId","setCurrentDoctorId","setTimeSlots","doctors","currentDoctor","map","doctor","id","day_start_time","day_end_time","timeJump","appointment_slot_time","split","now","currentTime","hour","minute","timeStamps","temp","add","parseInt","push","handleSelectedTimeSlot","e","setSelectedTimeSlot","target","checked","value","bookAppointment","currentDoctorId","bookingDate","selectedTimeSlot","patientName","patientEmail","patientContact","data","doctor_id","date","time_slot","patient_name","patient_email","patient_contact","body","JSON","stringify","res","post","alert","message","getToday","today","dd","mm","yyyy","Date","getDate","getMonth","getFullYear","console","log"],"sources":["/home/pragatim/code/repo/Book_react/BookAnAppointment_react/frontend/src/Services/HomeServices.js"],"sourcesContent":["import axios from 'axios';\nimport Request from '../Actions/Request';\nimport { config } from './Constants';\nimport moment from 'moment';\n\n\nexport const fillDoctorBookingDetails = (doctorId, setCurrentDoctorId, setTimeSlots, doctors) => {\n    setCurrentDoctorId(doctorId);\n    let currentDoctor = {};\n    doctors.map((doctor) => {\n        if (doctor.id === doctorId) {\n            currentDoctor = doctor;\n        }\n        return \"\";\n    });\n    let day_start_time = moment(currentDoctor.day_start_time, \"hh:mm\");\n    let day_end_time = moment(currentDoctor.day_end_time, \"hh:mm\");\n    const timeJump = currentDoctor.appointment_slot_time.split(\" \")[0];\n    let now = moment();\n    let currentTime = moment(`${now.hour()}:${now.minute()}`, \"hh:mm\");\n    let timeStamps = [];\n    //console.log(timeJump);\n    while (day_start_time < day_end_time) {\n        if (day_start_time >= currentTime) {\n            let temp = `${day_start_time.hour()}:${day_start_time.minute()}`\n            day_start_time = day_start_time.add(parseInt(timeJump), 'm');\n            temp = `${temp}-${day_start_time.hour()}:${day_start_time.minute()}`;\n            timeStamps.push(temp);\n        } else {\n            day_start_time = day_start_time.add(parseInt(timeJump), 'm');\n        }\n    }\n    setTimeSlots(timeStamps);\n}\n\nexport function handleSelectedTimeSlot(e, setSelectedTimeSlot) {\n    if (e.target.checked) {\n        setSelectedTimeSlot(e.target.value);\n    }\n    else {\n        setSelectedTimeSlot(\"\");\n    }\n}\n\nexport async function bookAppointment(currentDoctorId, bookingDate, selectedTimeSlot, patientName, patientEmail, patientContact) {\n    let data = {\n        doctor_id: currentDoctorId,\n        date: bookingDate,\n        time_slot: selectedTimeSlot,\n        patient_name: patientName,\n        patient_email: patientEmail,\n        patient_contact: patientContact,\n    };\n    const body = JSON.stringify(data);\n    const res = await axios.post(Request.bookAppointment, body, config);\n    alert(res.data.message);\n}\n\n\nexport function getToday() {\n    let today, dd, mm, yyyy;\n    today = new Date();\n    dd = today.getDate();\n    if (parseInt(dd) < 10) {\n        dd = \"0\" + dd;\n    }\n    mm = today.getMonth();\n    if (parseInt(mm) < 10) {\n        mm = \"0\" + mm;\n    }\n    yyyy = today.getFullYear();\n    console.log(yyyy + \"-\" + mm + \"-\" + dd)\n    return yyyy + \"-\" + mm + \"-\" + dd;\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,oBAAoB;AACxC,SAASC,MAAM,QAAQ,aAAa;AACpC,OAAOC,MAAM,MAAM,QAAQ;AAG3B,OAAO,MAAMC,wBAAwB,GAAG,CAACC,QAAQ,EAAEC,kBAAkB,EAAEC,YAAY,EAAEC,OAAO,KAAK;EAC7FF,kBAAkB,CAACD,QAAQ,CAAC;EAC5B,IAAII,aAAa,GAAG,CAAC,CAAC;EACtBD,OAAO,CAACE,GAAG,CAAEC,MAAM,IAAK;IACpB,IAAIA,MAAM,CAACC,EAAE,KAAKP,QAAQ,EAAE;MACxBI,aAAa,GAAGE,MAAM;IAC1B;IACA,OAAO,EAAE;EACb,CAAC,CAAC;EACF,IAAIE,cAAc,GAAGV,MAAM,CAACM,aAAa,CAACI,cAAc,EAAE,OAAO,CAAC;EAClE,IAAIC,YAAY,GAAGX,MAAM,CAACM,aAAa,CAACK,YAAY,EAAE,OAAO,CAAC;EAC9D,MAAMC,QAAQ,GAAGN,aAAa,CAACO,qBAAqB,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClE,IAAIC,GAAG,GAAGf,MAAM,EAAE;EAClB,IAAIgB,WAAW,GAAGhB,MAAM,CAAE,GAAEe,GAAG,CAACE,IAAI,EAAG,IAAGF,GAAG,CAACG,MAAM,EAAG,EAAC,EAAE,OAAO,CAAC;EAClE,IAAIC,UAAU,GAAG,EAAE;EACnB;EACA,OAAOT,cAAc,GAAGC,YAAY,EAAE;IAClC,IAAID,cAAc,IAAIM,WAAW,EAAE;MAC/B,IAAII,IAAI,GAAI,GAAEV,cAAc,CAACO,IAAI,EAAG,IAAGP,cAAc,CAACQ,MAAM,EAAG,EAAC;MAChER,cAAc,GAAGA,cAAc,CAACW,GAAG,CAACC,QAAQ,CAACV,QAAQ,CAAC,EAAE,GAAG,CAAC;MAC5DQ,IAAI,GAAI,GAAEA,IAAK,IAAGV,cAAc,CAACO,IAAI,EAAG,IAAGP,cAAc,CAACQ,MAAM,EAAG,EAAC;MACpEC,UAAU,CAACI,IAAI,CAACH,IAAI,CAAC;IACzB,CAAC,MAAM;MACHV,cAAc,GAAGA,cAAc,CAACW,GAAG,CAACC,QAAQ,CAACV,QAAQ,CAAC,EAAE,GAAG,CAAC;IAChE;EACJ;EACAR,YAAY,CAACe,UAAU,CAAC;AAC5B,CAAC;AAED,OAAO,SAASK,sBAAsB,CAACC,CAAC,EAAEC,mBAAmB,EAAE;EAC3D,IAAID,CAAC,CAACE,MAAM,CAACC,OAAO,EAAE;IAClBF,mBAAmB,CAACD,CAAC,CAACE,MAAM,CAACE,KAAK,CAAC;EACvC,CAAC,MACI;IACDH,mBAAmB,CAAC,EAAE,CAAC;EAC3B;AACJ;AAEA,OAAO,eAAeI,eAAe,CAACC,eAAe,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,WAAW,EAAEC,YAAY,EAAEC,cAAc,EAAE;EAC7H,IAAIC,IAAI,GAAG;IACPC,SAAS,EAAEP,eAAe;IAC1BQ,IAAI,EAAEP,WAAW;IACjBQ,SAAS,EAAEP,gBAAgB;IAC3BQ,YAAY,EAAEP,WAAW;IACzBQ,aAAa,EAAEP,YAAY;IAC3BQ,eAAe,EAAEP;EACrB,CAAC;EACD,MAAMQ,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC;EACjC,MAAMU,GAAG,GAAG,MAAMlD,KAAK,CAACmD,IAAI,CAAClD,OAAO,CAACgC,eAAe,EAAEc,IAAI,EAAE7C,MAAM,CAAC;EACnEkD,KAAK,CAACF,GAAG,CAACV,IAAI,CAACa,OAAO,CAAC;AAC3B;AAGA,OAAO,SAASC,QAAQ,GAAG;EACvB,IAAIC,KAAK,EAAEC,EAAE,EAAEC,EAAE,EAAEC,IAAI;EACvBH,KAAK,GAAG,IAAII,IAAI,EAAE;EAClBH,EAAE,GAAGD,KAAK,CAACK,OAAO,EAAE;EACpB,IAAInC,QAAQ,CAAC+B,EAAE,CAAC,GAAG,EAAE,EAAE;IACnBA,EAAE,GAAG,GAAG,GAAGA,EAAE;EACjB;EACAC,EAAE,GAAGF,KAAK,CAACM,QAAQ,EAAE;EACrB,IAAIpC,QAAQ,CAACgC,EAAE,CAAC,GAAG,EAAE,EAAE;IACnBA,EAAE,GAAG,GAAG,GAAGA,EAAE;EACjB;EACAC,IAAI,GAAGH,KAAK,CAACO,WAAW,EAAE;EAC1BC,OAAO,CAACC,GAAG,CAACN,IAAI,GAAG,GAAG,GAAGD,EAAE,GAAG,GAAG,GAAGD,EAAE,CAAC;EACvC,OAAOE,IAAI,GAAG,GAAG,GAAGD,EAAE,GAAG,GAAG,GAAGD,EAAE;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}